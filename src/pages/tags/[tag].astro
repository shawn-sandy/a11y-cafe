---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import BlogPost from "../../components/astro/BlogPosts.astro";
import type { SortType, TODO } from "#utils/types.js";


export async function getStaticPaths() {
  const allPosts = await (
    await getCollection("posts")
  ).sort(
    (a: SortType, b: SortType) =>
      b.data.pubDate.getTime() - a.data.pubDate.getTime()
  );

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.data.tags).flat()),
  ];

  return uniqueTags.map((tag: TODO) => {
    const isProductionEnv  = import.meta.env.PROD ? true : false;
    const filteredPosts = allPosts.filter((post) => {
      // post.data?.tags?.includes(tag)
      if (isProductionEnv) {
        return post.data?.tags?.includes(tag) && post.data.draft === false;
      } else {
        return post.data?.tags?.includes(tag);
      }
    }
      
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<Layout pageTitle={`${tag}`}>
  <ul data-list="unstyled">
    {
      posts?.map((post) => (
        <article>
          <BlogPost
            url={`/posts/${post.slug}`}
            title={post.data.title}
            description={post.data.description}
            descId={`tags-${post.slug}`}
          />
          {/* <p class="align-right">
            <a
              href={`/posts/${post.slug}`}
              aria-label={`Continue reading ${post.data.title}`}
            >
              <i aria-hidden="true">Continue reading</i>
            </a>
          </p> */}
          {/* <hr /> */}
        </article>
      ))
    }
  </ul>
</Layout> 